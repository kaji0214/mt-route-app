// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DB_URL")
}

generator typegraphql {
  provider           = "typegraphql-prisma"
  output             = "../graphql/generated/type-graphql"
  emitTranspiledCode = true
}

model User {
  id            Int        @id @default(autoincrement())
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  routes        Route[]
  mountains     Mountain[]
}

model Latlng {
  id        Int        @id @default(autoincrement())
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  lat       Float
  lng       Float
  routeId   Int
  route     Route     @relation(fields: [routeId], references: [id])
}

model Mountain {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  lat       Float
  lng       Float
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  routes    Route[]
  Session   Session? @relation(fields: [sessionId], references: [id])
  sessionId Int?
  @@unique([lat, lng])
}

model Route {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  name       String
  time       Int
  mountain   Mountain @relation(fields: [mountainId], references: [id])
  mountainId Int
  latlngs    Latlng[]
  user       User     @relation(fields: [userId], references: [id])
  userId     Int
  Session    Session? @relation(fields: [sessionId], references: [id])
  sessionId  Int?
}

model Account {
  id                 Int     @id @default(autoincrement())
  userId             Int
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           Int        @id @default(autoincrement())
  sessionToken String     @unique
  userId       Int
  expires      DateTime
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  Mountain     Mountain[]
  Route        Route[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
